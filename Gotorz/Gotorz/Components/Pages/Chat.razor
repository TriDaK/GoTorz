@page "/chat"
@using Gotorz.Models
@using Gotorz.Services
@using Gotorz.Services.Api
@* No clue how this works *@
@implements IAsyncDisposable
@rendermode InteractiveServer

@inject ChatApiService ChatApiService
@inject IChatService ChatService

<h3>Chat: @PackageId</h3>

<ul>
    @foreach (var msg in Messages)
    {
        <li>@msg.UserId: @msg.Message (@msg.Timestamp)</li>
    }
</ul>

<input @bind="NewMessage" @onkeydown="HandleKeyDown" />

@code {
    [Parameter] public int PackageId { get; set; } = 5;

    private List<ChatMessage> Messages = new();
    private string NewMessage;

    protected override async Task OnInitializedAsync()
    {
        ChatService.OnMessageReceived += message =>
        {
            if (message.PackageId == PackageId)
            {
                InvokeAsync(() =>
                {
                    Messages.Add(message);
                    StateHasChanged();
                });
            }
        };

        await ChatService.StartAsync(PackageId);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(NewMessage))
        {
            var message = new ChatMessage
                {
                    PackageId = PackageId,
                    UserId = "some-user", // Get from identity/auth
                    Message = NewMessage,
                    Timestamp = DateTime.UtcNow
                };

            // Send via API (not SignalR directly)
            await ChatApiService.SendMessageAsync(message);
            NewMessage = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ChatService.StopAsync(PackageId);
    }
}
