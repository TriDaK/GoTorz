@page "/packageView/{packageId:int}"
@using Gotorz.Models
@using Gotorz.Services
@rendermode InteractiveServer

@inject IPackageService PackageService
@inject FlightService FlightService

@if (package == null)
{

}
else
{
    @*DELE ALT OP MED DIV !!!!!!!!!!!!!!!!!!!!!!!!*@

    @*Header - package name*@
    <h3>PackageView for @packageId</h3> @*Only for testing purposes*@
    <h3>@package.Name</h3>

    @*Description*@
    <p></p>  <p></p>
    <h4>Decription:</h4>
    <p>@package.Description</p>

    @*Flight info from API*@
    <p></p>  <p></p>
    <h4>Flights:</h4>
    <h5>Outbound:</h5>
    <p>@outboundFlight.DestinationFrom (@outboundFlight.AirportFrom) - @outboundFlight.DestinationTo (@outboundFlight.AirportTo)</p>
        
    @*<h1>TEST</h1>*@
    <p> @package.Flights[0].FlightNumber </p>
    @*<div>
        @foreach (var f in outboundFlight)
        {
            <p>@f.DestinationFrom to @f.DestinationTo</p>
        }
    </div>*@


    <h5>Return: </h5>

    @*Hotel info from API*@
    <p></p>  <p></p>
    <h4>Hotel:</h4>

    @*Traveler to Traveler chatfunction*@
    <p></p>  <p></p>
    <h4>Traveler2Traveler chat:</h4>
    <Chat PackageId=@packageId/>
}

@code {
    [Parameter]
    public int packageId { get; set; }

    private Package package;
    private Flight outboundFlight;
    private Flight returnFlight;

    protected override async Task OnInitializedAsync()
    {
        package = await PackageService.SearchPackageAsyncByID(packageId);

        // flight info from API 

        //DateTime departure = package.Flights[0].TimeDeparture;
        /*string flightNumber = package.Flights[0].FlightNumber;
        outboundFlight = await FlightService.SearchFlightsAsync(null, null, null, flightNumber);*/



        DateTime departure = package.Flights[0].TimeDeparture;
        string flightNumber = package.Flights[0].FlightNumber;
        //List<Flight> outbound = new();
                
        List<Flight> outbound = await FlightService.SearchFlightsAsync("", "", /*package.Flights[0].TimeDeparture, package.Flights[0].FlightNumber,*/ departure, flightNumber);
        outboundFlight = outbound[0];

        /*try
        {
            List<Flight> inbound = await FlightService.SearchFlightsAsync("", "", package.Flights[1].TimeDeparture, package.Flights[1].FlightNumber);
            returnFlight = inbound[0];
        }
        catch
        {
            returnFlight = new Flight();
        }*/

        
        //outboundFlight = (await FlightService.SearchFlightsAsync("", "", package.Flights[0].TimeDeparture, package.Flights[0].FlightNumber))[0];

        //returnFlight = (await FlightService.SearchFlightsAsync("", "", package.Flights[1].TimeDeparture, package.Flights[1].FlightNumber))[0];

        // hotal info from API
    }
}
